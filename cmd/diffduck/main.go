package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
)

const HELP_TEXT = `
diffduck is an AI-powered writing assistant for git commit messages.

Commands:
	diffduck up		Setup git repository
	diffduck commit <path>	Edit commit message at <path>
	diffduck version	Print the version`

const DEFAULT_CONFIG_JSON = `{
	"gitHooksPath": ".githooks",
	"reportCommandUsage": true
}`

const DEFAULT_PRE_COMMIT_HOOK = `#!/usr/bin/env python3
# This file was auto-generated by diffduck.
# https://diffduck.com/docs

set -e	# Exit on error.
diffduck commit $1	# Run diffduck, the writing assistant for git commit messages.
`

type Config struct {
	GitHooksPath       string `json:"gitHooksPath"`
	ReportCommandUsage bool   `json:"reportCommandUsage"`
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println(HELP_TEXT)
		os.Exit(1)
	}

	arg := os.Args[1]
	switch arg {
	case "up":
		if err := commandUp(); err != nil {
			fmt.Println("Error: ", err)
			os.Exit(1)
		}
	case "version":
		fmt.Println("DiffDuck v0.1.0")
		os.Exit(0)
	default:
		fmt.Println("Unexpected command:", arg)
		fmt.Println(HELP_TEXT)
		os.Exit(1)
	}

	os.Exit(0)

	path := filepath.Clean(arg)

	fileInfo, err := os.Stat(path)
	if err != nil {
		fmt.Println("Error: ", err)
		os.Exit(1)
	}

	if fileInfo.IsDir() {
		fmt.Println("Error: ", path, "is a directory, not a file.")
		os.Exit(1)
	}

	file, err := os.Open(path)
	if err != nil {
		fmt.Println("Error: ", err)
		os.Exit(1)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		if line != "" && line[0:1] != "#" {
			fmt.Println("Commit message is not empty. Skipping.")
			os.Exit(0)
		}
	}

	runWorkflow()
	fmt.Println("Writing commit message to", path)
	if err := os.WriteFile(path, []byte("Hello, DiffDuck!\n"), 0644); err != nil {
		fmt.Println("Error: ", err)
		os.Exit(1)
	}

	os.Exit(0)
}

func commandUp() error {
	var gitRootPath string
	var configJsonPath string

	{ // Initialize gitRootPath and configJsonPath.
		c := exec.Command("git", "rev-parse", "--show-toplevel")
		output, err := c.Output()
		if err != nil {
			return err
		}

		gitRootPath = string(output)
		gitRootPath = strings.TrimSuffix(gitRootPath, "\n")
		gitRootPath = filepath.Clean(gitRootPath)
		configJsonPath = filepath.Join(gitRootPath, "diffduck.json")
	}

	println("gitRootPath=", configJsonPath)
	println("configJsonPath=", configJsonPath)

	{ // Create diffduck.json, if not exists.
		_, err := os.Stat(configJsonPath)
		if err != nil && !os.IsNotExist(err) {
			return err
		}

		if os.IsNotExist(err) {
			err := os.WriteFile(configJsonPath, []byte(DEFAULT_CONFIG_JSON), 0644)
			println("Created new config file: ", configJsonPath)
			if err != nil {
				return err
			}
		}
	}

	var config Config

	{ // Read diffduck.json into config.
		fileInfo, err := os.Stat(configJsonPath)
		if err != nil {
			return err
		}

		if fileInfo.IsDir() {
			return fmt.Errorf(
				fmt.Sprint(configJsonPath, " is a directory, not a file."),
			)
		}

		file, err := os.Open(configJsonPath)
		if err != nil {
			return err
		}
		defer file.Close()

		data, err := os.ReadFile(configJsonPath)
		if err != nil {
			return err
		}

		if err := json.Unmarshal(data, &config); err != nil {
			return err
		}
	}

	gitHooksPath := filepath.Join(gitRootPath, config.GitHooksPath)

	{ // Create gitHooksPath.
		fileInfo, err := os.Stat(gitHooksPath)
		if err != nil && !os.IsNotExist(err) {
			return err
		}

		createdNew := false
		if !os.IsNotExist(err) {
			if err := os.Mkdir(gitHooksPath, 0755); err != nil {
				return err
			}
			createdNew = true
			println("Created new gitHooksPath: ", gitHooksPath)
		}

		if !createdNew && !fileInfo.IsDir() {
			return fmt.Errorf(
				fmt.Sprint(gitHooksPath, " is a file, not a directory."),
			)
		}
	}

	{ // Create gitHooksPath/pre-commit-msg.
		preCommitMsgPath := filepath.Join(gitHooksPath, "pre-commit-msg")
		fileInfo, err := os.Stat(preCommitMsgPath)
		createdNew := false
		if err != nil && !os.IsNotExist(err) {
			return err
		}

		if !os.IsNotExist(err) {
			if err := os.WriteFile(preCommitMsgPath, []byte("#!/bin/sh\n\ndiffduck commit $1\n"), 0755); err != nil {
				return err
			}
			createdNew = true
			println("Created new pre-commit-msg: ", preCommitMsgPath)
		}

		if !createdNew && fileInfo.IsDir() {
			return fmt.Errorf(
				fmt.Sprint(preCommitMsgPath, " is a directory, not a file."),
			)
		}
	}

	{ // Run "git config core.hooksPath .githooks".
		c := exec.Command("git", "config", "core.hooksPath", ".githooks")
		if err := c.Run(); err != nil {
			return err
		}
		println("Set core.hooksPath to .githooks in local repository")
	}

	println("diffduck up completed successfully.")
	return nil
}

func runWorkflow() {
	if len(os.Getenv("DEBUG")) > 0 {
		f, err := tea.LogToFile("debug.log", "debug")
		if err != nil {
			fmt.Println("fatal:", err)
			os.Exit(1)
		}
		defer f.Close()
	}

	p := tea.NewProgram(initialModel())
	if _, err := p.Run(); err != nil {
		fmt.Println("Error: ", err)
		os.Exit(1)
	}
}

type model struct {
	choices  []string
	cursor   int
	selected map[int]struct{}
}

func initialModel() model {
	return model{
		choices:  []string{"foo", "bar", "baz"},
		selected: make(map[int]struct{}),
	}
}

func (m model) Init() tea.Cmd {
	return nil
}

func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "q":
			return m, tea.Quit
		case "up", "k":
			if m.cursor > 0 {
				m.cursor--
			}
		case "down", "j":
			if m.cursor < len(m.choices)-1 {
				m.cursor++
			}
		case "enter":
			if _, ok := m.selected[m.cursor]; ok {
				delete(m.selected, m.cursor)
			} else {
				m.selected[m.cursor] = struct{}{}
			}
		}
	}
	return m, nil
}

func (m model) View() string {
	s := "Select a choice with up/down arrows and enter to toggle:\n\n"

	for i, choice := range m.choices {
		cursor := " " // no cursor
		if m.cursor == i {
			cursor = ">" // cursor!
		}

		checked := " " // not checked
		if _, ok := m.selected[i]; ok {
			checked = "x" // checked!
		}

		s += fmt.Sprintf("%s [%s] %s\n", cursor, checked, choice)
	}

	s += "\nPress q to quit.\n"

	return s
}
